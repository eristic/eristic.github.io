---
import Layout from '../../layouts/Layout.astro';
import type { MarkdownInstance } from 'astro';

interface PostFrontmatter {
  title: string;
  pubDate: string;
  author?: string;
  description?: string;
  tags?: string[];
}

type Post = MarkdownInstance<PostFrontmatter>;

export async function getStaticPaths() {
  // Get all markdown files from subdirectories (including year-based directories)
  const posts: Post[] = await Astro.glob('./**/*.md');
  
  // Sort by date
  posts.sort((a: Post, b: Post) => new Date(b.frontmatter.pubDate).getTime() - new Date(a.frontmatter.pubDate).getTime());
  
  const postsPerPage = 5;
  const totalPosts: number = posts.length;
  const totalPages: number = Math.ceil(totalPosts / postsPerPage);
  
  return Array.from({ length: totalPages }, (_, i) => {
    const page: number = i + 1;
    const startIndex: number = i * postsPerPage;
    const endIndex: number = startIndex + postsPerPage;
    const currentPosts: Post[] = posts.slice(startIndex, endIndex);
    
    return {
      params: { page: page.toString() },
      props: { 
        posts: currentPosts, 
        currentPage: page, 
        totalPages, 
        totalPosts,
        startIndex,
        endIndex
      }
    };
  });
}

const { posts, currentPage, totalPages, totalPosts, startIndex, endIndex } = Astro.props;
const hasPagination: boolean = totalPosts > 5;
const hasNextPage: boolean = currentPage < totalPages;
const hasPrevPage: boolean = currentPage > 1;

// Function to generate pagination numbers with ellipsis
function generatePaginationNumbers(current: number, total: number): (number | string)[] {
  const delta = 1; // Number of pages to show before and after current page
  const range: number[] = [];
  const rangeWithDots: (number | string)[] = [];
  let l: number | undefined;

  // Always include page 1
  range.push(1);

  // Calculate the range of pages to show around current page
  for (let i = Math.max(2, current - delta); i <= Math.min(total - 1, current + delta); i++) {
    range.push(i);
  }

  // Always include the last page
  if (total > 1) {
    range.push(total);
  }

  // Add ellipsis where needed
  for (const i of range) {
    if (l !== undefined) {
      if (i - l === 2) {
        // If there's only one page gap, just show that page instead of dots
        rangeWithDots.push(l + 1);
      } else if (i - l !== 1) {
        // Add ellipsis if gap is larger
        rangeWithDots.push('...');
      }
    }
    rangeWithDots.push(i);
    l = i;
  }

  return rangeWithDots;
}

const paginationNumbers = generatePaginationNumbers(currentPage, totalPages);
---

<Layout title={`${currentPage} | All Posts | Scott's Thoughts`} description="Explore the backlog of blog posts and articles">
  <section class="hero">
    <div class="container">
      <h1>All Posts</h1>
      <p>Explore the backlog of blog posts and articles.</p>
    </div>
  </section>

  <div class="container">
    <section class="featured">
      <div class="post-grid">
        {posts.map(post => (
          <a href={post.url} class="post-card">
            <div class="post-card-content">
              <h3>
                {post.frontmatter.title}
              </h3>
              <div class="post-metadata">
                {post.frontmatter.pubDate && (
                  <time datetime={new Date(post.frontmatter.pubDate).toISOString()}>
                    {new Date(post.frontmatter.pubDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                )}
                {post.frontmatter.author && (
                  <span class="author">by {post.frontmatter.author}</span>
                )}
              </div>
              {post.frontmatter.description && (
                <p class="description">{post.frontmatter.description}</p>
              )}
              {post.frontmatter.tags && post.frontmatter.tags.length > 0 && (
                <div class="post-tags">
                  {post.frontmatter.tags.map(tag => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              )}
            </div>
          </a>
        ))}
      </div>
      
      {hasPagination && (
        <nav class="pagination" aria-label="Blog post pagination">
          <div class="pagination-info">
            <div class="pagination-stats">
              <span class="page-indicator">Page {currentPage} of {totalPages}</span>
              <span class="posts-indicator">Showing {startIndex + 1}-{Math.min(endIndex, totalPosts)} of {totalPosts} posts</span>
            </div>
          </div>
          
          <div class="pagination-controls">
            {hasPrevPage && (
              <a href={currentPage === 2 ? '/posts/' : `/posts/${currentPage - 1}`} class="pagination-link prev">
                ← Previous
              </a>
            )}
            
            <div class="pagination-numbers">
              {paginationNumbers.map((pageNum) => (
                pageNum === '...' 
                  ? <span class="pagination-ellipsis">…</span>
                  : <a 
                      href={pageNum === 1 ? '/posts/' : `/posts/${pageNum}`}
                      class={`pagination-link ${pageNum === currentPage ? 'active' : ''}`}
                      aria-current={pageNum === currentPage ? 'page' : undefined}
                    >
                      {pageNum}
                    </a>
              ))}
            </div>
            
            {hasNextPage && (
              <a href={`/posts/${currentPage + 1}`} class="pagination-link next">
                Next →
              </a>
            )}
          </div>
        </nav>
      )}
    </section>
  </div>
</Layout>

<style>
    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 0 1rem;
    }
  
    @property --myColor1 {
      syntax: '<color>';
      initial-value: rgba(241, 241, 242, 1);
      inherits: false;
    }
  
    @property --myColor2 {
      syntax: '<color>';
      initial-value: rgba(91, 124, 153, 1);
      inherits: false;
    }
  
    h1, h2, h3, h4, h5, h6, time {
      font-family: 'Montserrat Variable', sans-serif;
      font-weight: 900;
    }
  
    p, time, a {
      font-family: 'Montserrat Variable', sans-serif;
      font-weight: 500;
    }
  
    .hero {
      background-color: var(--hero-bg-color);
      border-bottom: 5px solid var(--hero-border-color);
      transition: background-color 0.3s ease, border-color 0.3s ease;
      margin-bottom: 1.7rem;
    }
  
    .hero h1 {
    margin: 0;
    color: var(--post-title-color);
    padding-top: 1rem;
  }

  .hero p {
    margin: 0;
    color: var(--post-description-color);
    line-height: 1.7;
    margin-bottom: 1rem;
  }

    .tag {
      color: var(--tag-color);
      font-size: 0.9rem;
      font-weight: 500;
      text-decoration: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      background-color: var(--nav-link-bg);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      letter-spacing: 0.5px;
    }

    .tag:hover {
      transform: translateY(-2px);
    }
  
    h2 {
      color: var(--section-heading-color);
      font-size: 2rem;
      font-weight: 900;
      margin-bottom: 1rem;
      margin-top: 1rem;
    }
  
    h3 {
      margin-bottom: 0;
      margin-top: 0;
    }
  
    h3 a {
      font-family: 'Montserrat Variable', sans-serif;
      font-weight: 7  00;
      text-decoration: none;
      color: var(--post-title-color);
      font-size: 2rem;
      line-height: 1;
    }
  
    .post-metadata time {
      color: var(--post-meta-color);
    }
  
    .post-metadata .author {
      color: var(--post-meta-color);
      font-family: 'Montserrat Variable', sans-serif;
      font-style: italic;
      margin-left: 1rem;
    }
  
    .description {
      color: var(--post-description-color);
    }
  
    a.post-card {
      display: grid;
      grid-auto-rows: minmax(min-content, max-content);
      grid-template-columns: auto 1fr;
      padding: 1.5rem 0 1.5rem 1.5rem;
      margin-bottom: 2rem;
      position: relative;
      background: var(--post-card-bg);
      border-radius: 15px;
      transition: background 2s ease, border-radius 2s, --myColor1 1s, --myColor2 1s;
      text-decoration: none;
      color: inherit;
    }
  
    a.post-card:hover {
      background: var(--post-card-hover-bg);
      border-radius: 0;
      text-decoration: none;
    }
  
    .post-card-link {
      display: block;
      text-decoration: none;
      color: inherit;
    }
  
    .post-card-link:hover {
      text-decoration: none;
    }
  
    .pagination {
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 3px solid var(--pagination-separator-color);
      transition: border-color 0.3s ease;
    }
  
    .pagination-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      font-family: 'Montserrat Variable', sans-serif;
      font-weight: 400;
      color: var(--footer-text-color);
      font-size: 0.9rem;
    }
  
    .pagination-stats {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }
  
    .page-indicator {
      font-weight: 600;
      color: var(--footer-text-color);
    }
  
    .posts-indicator {
      font-size: 0.8rem;
      opacity: 0.8;
    }
  
    .pagination-controls {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }
  
    .pagination-numbers {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }
  
    .pagination-link {
      text-decoration: none;
      font-family: 'Montserrat Variable', sans-serif;
      color: var(--nav-text-color);
      padding: 0.5rem 1rem;
      border-radius: 6px;
      background-color: var(--nav-link-bg);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      letter-spacing: 0.5px;
      font-size: 0.9rem;
    }
  
    .pagination-link:hover {
      background-color: var(--nav-link-hover-bg);
      transform: translateY(-2px);
      color: var(--nav-text-color);
    }
  
    .pagination-link.active {
      background-color: var(--nav-link-active-bg);
      transform: translateY(0);
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    }
    
    .pagination-ellipsis {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      color: var(--pagination-separator-color);
      font-size: 1.2rem;
      font-weight: 500;
    }
  </style> 