---
import Layout from '../../layouts/Layout.astro';
import type { MarkdownInstance } from 'astro';

interface PostFrontmatter {
  title: string;
  pubDate: string;
  author?: string;
}

type Post = MarkdownInstance<PostFrontmatter>;

export async function getStaticPaths() {
  // Get all markdown files from the current directory and test-articles subdirectory
  const rootPosts: Post[] = await Astro.glob('./*.md');
  // Combine all posts
  const posts: Post[] = [...rootPosts];
  
  // Sort by date
  posts.sort((a: Post, b: Post) => new Date(b.frontmatter.pubDate).getTime() - new Date(a.frontmatter.pubDate).getTime());
  
  const postsPerPage = 5;
  const totalPosts: number = posts.length;
  const totalPages: number = Math.ceil(totalPosts / postsPerPage);
  
  return Array.from({ length: totalPages }, (_, i) => {
    const page: number = i + 1;
    const startIndex: number = i * postsPerPage;
    const endIndex: number = startIndex + postsPerPage;
    const currentPosts: Post[] = posts.slice(startIndex, endIndex);
    
    return {
      params: { page: page.toString() },
      props: { 
        posts: currentPosts, 
        currentPage: page, 
        totalPages, 
        totalPosts,
        startIndex,
        endIndex
      }
    };
  });
}

const { posts, currentPage, totalPages, totalPosts, startIndex, endIndex } = Astro.props;
const hasPagination: boolean = totalPosts > 5;
const hasNextPage: boolean = currentPage < totalPages;
const hasPrevPage: boolean = currentPage > 1;

// Function to generate pagination numbers with ellipsis
function generatePaginationNumbers(current: number, total: number) {
  // Original logic for page 1 and last page
  const delta = 1; // Number of pages to show before and after current page
  const range = [];
  const rangeWithDots = [];
  let l;

  // Always include page 1
  range.push(1);

  // Calculate the range of pages to show around current page
  for (let i = Math.max(2, current - delta); i <= Math.min(total - 1, current + delta); i++) {
    range.push(i);
  }

  // Always include the last page
  if (total > 1) {
    range.push(total);
  }

  // Add ellipsis where needed
  for (const i of range) {
    if (l) {
      if (i - l === 2) {
        // If there's only one page gap, just show that page instead of dots
        rangeWithDots.push(l + 1);
      } else if (i - l !== 1) {
        // Add ellipsis if gap is larger
        rangeWithDots.push('...');
      }
    }
    rangeWithDots.push(i);
    l = i;
  }

  return rangeWithDots;
}

const paginationNumbers = generatePaginationNumbers(currentPage, totalPages);
---

<Layout title={`Page ${currentPage} | All Posts | Scott's Thoughts`} description="Read my latest blog posts">
  <section class="hero">
    <div class="container">
      <h1>All Blog Posts</h1>
      <p>Explore the backlog of blog posts and articles.</p>
    </div>
  </section>

  <div class="container">
    <section class="featured">
      <div class="post-grid">
        {posts.map(post => (
          <a href={post.url} class="post-card">
            <div class="post-card-content">
              <h3>
                {post.frontmatter.title}
              </h3>
              <div class="post-metadata">
                {post.frontmatter.pubDate && (
                  <time datetime={new Date(post.frontmatter.pubDate).toISOString()}>
                    {new Date(post.frontmatter.pubDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                )}
                {post.frontmatter.author && (
                  <span class="author">by {post.frontmatter.author}</span>
                )}
              </div>
            </div>
          </a>
        ))}
      </div>
      
      {hasPagination && (
        <nav class="pagination" aria-label="Blog post pagination">
          <div class="pagination-info">
            <div class="pagination-stats">
              <span class="page-indicator">Page {currentPage} of {totalPages}</span>
              <span class="posts-indicator">Showing {startIndex + 1}-{Math.min(endIndex, totalPosts)} of {totalPosts} posts</span>
            </div>
          </div>
          
          <div class="pagination-controls">
            {hasPrevPage && (
              <a href={currentPage === 2 ? '/post/' : `/post/page-${currentPage - 1}`} class="pagination-link prev">
                ← Previous
              </a>
            )}
            
            <div class="pagination-numbers">
              {paginationNumbers.map((pageNum) => (
                pageNum === '...' 
                  ? <span class="pagination-ellipsis">…</span>
                  : <a 
                      href={pageNum === 1 ? '/post/' : `/post/page-${pageNum}`}
                      class={`pagination-link ${pageNum === currentPage ? 'active' : ''}`}
                      aria-current={pageNum === currentPage ? 'page' : undefined}
                    >
                      {pageNum}
                    </a>
              ))}
            </div>
            
            {hasNextPage && (
              <a href={`/post/page-${currentPage + 1}`} class="pagination-link next">
                Next →
              </a>
            )}
          </div>
        </nav>
      )}
    </section>
  </div>
</Layout>

<style>
  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  @property --myColor1 {
    syntax: '<color>';
    initial-value: rgba(241, 241, 242, 1);
    inherits: false;
  }

  @property --myColor2 {
    syntax: '<color>';
    initial-value: rgba(91, 124, 153, 1);
    inherits: false;
  }

  h1, h2, h3, h4, h5, h6, time {
    font-family: 'Montserrat Variable', sans-serif;
    font-weight: 900;
    font-variation-settings: 'wght' 900;
  }

  p, time, a {
    font-family: 'Montserrat Variable', sans-serif;
    font-weight: 400;
    font-variation-settings: 'wght' 500;
  }

  .hero {
    background-color: var(--hero-bg-color);
    border-bottom: 5px solid var(--hero-border-color);
    transition: background-color 0.3s ease, border-color 0.3s ease;
    margin-bottom: 1.68rem;
  }

  .hero h1 {
    margin: 0;
    color: var(--post-title-color);
    transition: color 0.3s ease;
  }

  .hero p {
    margin: 0;
    color: var(--post-description-color);
    transition: color 0.3s ease;
  }

  h2 {
    color: var(--section-heading-color);
    font-size: 2rem;
    font-weight: 900;
    font-variation-settings: 'wght' 900;
    margin-bottom: 1rem;
    margin-top: 1rem;
    transition: color 0.3s ease;
  }

  h3 {
    margin-bottom: 0;
    margin-top: 0;
  }

  h3 a {
    font-family: 'Montserrat Variable', sans-serif;
    font-weight: 900;
    font-variation-settings: 'wght' 700;
    text-decoration: none;
    color: var(--post-title-color);
    font-size: 2rem;
    line-height: 1;
    transition: color 0.3s ease;
  }

  .post-metadata time {
    color: var(--post-meta-color);
    transition: color 0.3s ease;
  }

  .post-metadata .author {
    color: var(--post-meta-color);
    font-family: 'Montserrat Variable', sans-serif;
    font-style: italic;
    margin-left: 1rem;
  }

  .description {
    color: var(--post-description-color);
    transition: color 0.3s ease;
  }

  article.post-card, a.post-card {
    display: grid;
    grid-auto-rows: minmax(min-content, max-content);
    grid-template-columns: auto 1fr;
    padding: 1.5rem 0 1.5rem 1.5rem;
    margin-bottom: 2rem;
    position: relative;
    background: var(--post-card-bg);
    border-radius: 15px;
    transition: background 0.3s ease, border-radius 1s, --myColor1 1s, --myColor2 1s;
    text-decoration: none;
    color: inherit;
  }

  [data-theme="light"] a.post-card {
    --myColor1: rgba(241, 241, 242, 1);
    --myColor2: rgba(91, 124, 153, 1);
  }

  [data-theme="dark"] a.post-card {
    --myColor1: rgba(45, 55, 72, 1);
    --myColor2: rgba(26, 32, 44, 1);
  }

  a.post-card:hover {
    background: var(--post-card-hover-bg);
    border-radius: 0;
    text-decoration: none;
  }

  .pagination {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--post-meta-color);
    transition: border-color 0.3s ease;
  }

  .pagination-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    font-family: 'Montserrat Variable', sans-serif;
    font-weight: 400;
    color: var(--post-meta-color);
    font-size: 0.9rem;
    transition: color 0.3s ease;
  }

  .pagination-stats {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .page-indicator {
    font-weight: 600;
    color: var(--post-title-color);
    transition: color 0.3s ease;
  }

  .posts-indicator {
    font-size: 0.8rem;
    opacity: 0.8;
  }

  .pagination-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .pagination-numbers {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .pagination-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 1rem;
    text-decoration: none;
    color: var(--post-title-color);
    background: var(--pagination-link-bg);
    border-radius: 8px;
    font-family: 'Montserrat Variable', sans-serif;
    font-weight: 500;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    min-width: 2.5rem;
    height: 2.5rem;
    border: 1px solid transparent;
  }

  .pagination-ellipsis {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 2.5rem;
    height: 2.5rem;
    color: var(--post-meta-color);
    font-size: 1.2rem;
    font-weight: 700;
  }

  .pagination-link.prev,
  .pagination-link.next {
    min-width: auto;
    padding: 0.5rem 1rem;
  }

  @media (max-width: 600px) {
    .pagination-info {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }
    
    .pagination-stats {
      align-items: center;
    }
    
    .pagination-controls {
      flex-direction: column;
      gap: 1rem;
    }
    
    .pagination-numbers {
      order: 2;
    }
    
    .pagination-link.prev {
      order: 1;
    }
    
    .pagination-link.next {
      order: 3;
    }
  }
</style> 