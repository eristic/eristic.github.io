---
import '@fontsource-variable/montserrat';

interface Props {
  title: string;
  description?: string;
  image?: string;
  author?: string;
  pubDate?: Date | string;
  tags?: string[];
  type?: 'website' | 'article';
}

const { 
  title, 
  description = "A blog about technology and creativity",
  image = "/android-chrome-512x512.png",
  author = "Scott Stewart",
  pubDate,
  tags,
  type = "website"
} = Astro.props;

// Get the current URL
const canonicalURL = new URL(Astro.url.pathname, Astro.site || 'https://startst.art');
const siteUrl = Astro.site || 'https://startst.art';
const imageUrl = new URL(image, siteUrl).toString();
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={imageUrl} />
    <meta property="og:site_name" content="Start Start" />
    <meta property="og:locale" content="en_US" />
    {author && <meta property="article:author" content={author} />}
    {pubDate && <meta property="article:published_time" content={new Date(pubDate).toISOString()} />}
    {tags && tags.map(tag => <meta property="article:tag" content={tag} />)}
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={imageUrl} />
    <meta name="twitter:creator" content="@scottst_w_rt" />
    <meta name="twitter:site" content="@scottst_w_rt" />
    
    <!-- Favicons -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/android-chrome-192x192.png">
    <link rel="icon" type="image/png" sizes="512x512" href="/android-chrome-512x512.png">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    
    <title>{title}</title>
  </head>
  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-ZD6YVBT0CJ"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-ZD6YVBT0CJ');
  </script>
  <body>
    <div class="site-wrapper">
      <header>
        <div class="container">
          <nav>
            <a href="/" class="home-icon-link" aria-label="Home">
              <img src="/android-chrome-192x192.png" alt="Home" class="home-icon" />
            </a>
            <a href="/" class="nav-link">Latest</a>
            <a href="/posts" class="nav-link">All</a>
            <a href="/tags" class="nav-link">Tags</a>
          </nav>
          <button id="theme-toggle" class="theme-toggle" aria-label="Toggle dark mode">
            <span class="light-icon">üëè</span>
            <span class="dark-icon">üëè</span>
            <span class="tooltip" id="theme-tooltip">Clap off</span>
          </button>
        </div>
      </header>
      <main>
        <slot />
      </main>
      <footer>
        <p>&copy; {new Date().getFullYear()} <a href="https://sstew.art">Scott Stewart</a>. All rights reserved.
          <div class="social-links">
            <a href="https://github.com/eristic" target="_blank" rel="noopener noreferrer" aria-label="GitHub">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
              </svg>
            </a>
            <a href="https://www.linkedin.com/in/scottcarlislestewart/" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
            </a>
            <a href="https://x.com/scottst_w_rt" target="_blank" rel="noopener noreferrer" aria-label="X (Twitter)">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
              </svg>
            </a>
            <a href="https://bsky.app/profile/sstew.art" target="_blank" rel="noopener noreferrer" aria-label="Bluesky">
              <svg width="24" height="24" viewBox="0 0 600 530" fill="currentColor">
                <path d="m135.72 44.03c66.496 49.921 138.02 151.14 164.28 205.46 26.262-54.316 97.782-155.54 164.28-205.46 47.98-36.021 125.72-63.892 125.72 24.795 0 17.712-10.155 148.79-16.111 170.07-20.703 73.984-96.144 92.854-163.25 81.433 117.3 19.964 147.14 86.092 82.697 152.22-122.39 125.59-175.91-31.511-189.63-71.766-2.514-7.3797-3.6904-10.832-3.7077-7.8964-0.0174-2.9357-1.1937 0.51669-3.7077 7.8964-13.714 40.255-67.233 197.36-189.63 71.766-64.444-66.128-34.605-132.26 82.697-152.22-67.108 11.421-142.55-7.4491-163.25-81.433-5.9562-21.282-16.111-152.36-16.111-170.07 0-88.687 77.742-60.816 125.72-24.795z"/>
              </svg>
            </a>
          </div>
        </p>
        
      </footer>
    </div>

    <!-- Astro-specific script for theme management -->
    <script is:inline>
      // Prevent flash of unstyled content (FOUC) by setting theme before page renders
      (function() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
        
        // Also set the tooltip text early to prevent flash
        setTimeout(() => {
          const tooltip = document.getElementById('theme-tooltip');
          if (tooltip) {
            tooltip.textContent = savedTheme === 'dark' ? 'Clap on' : 'Clap off';
          }
        }, 0);
      })();
    </script>

    <script>
      // Theme toggle functionality - Astro-optimized
      function initThemeToggle() {
        const themeToggle = document.getElementById('theme-toggle');
        const html = document.documentElement;
        
        if (!themeToggle) return;

        // Update toggle button state
        function updateToggleButton(theme: string, updateTooltip: boolean = true) {
          const lightIcon = themeToggle!.querySelector('.light-icon');
          const darkIcon = themeToggle!.querySelector('.dark-icon');
          const tooltip = themeToggle!.querySelector('.tooltip') as HTMLElement;
          
          if (lightIcon && darkIcon && tooltip) {
            if (theme === 'dark') {
              (lightIcon as HTMLElement).style.opacity = '0';
              (darkIcon as HTMLElement).style.opacity = '1';
              if (updateTooltip) {
                tooltip.textContent = 'Clap on';
              }
            } else {
              (lightIcon as HTMLElement).style.opacity = '1';
              (darkIcon as HTMLElement).style.opacity = '0';
              if (updateTooltip) {
                tooltip.textContent = 'Clap off';
              }
            }
          }
        }

        // Handle theme toggle
        function handleToggle() {
          const currentTheme = html.getAttribute('data-theme');
          const newTheme = currentTheme === 'light' ? 'dark' : 'light';
          
          // Hide tooltip immediately to prevent flash
          const tooltip = themeToggle!.querySelector('.tooltip') as HTMLElement;
          if (tooltip) {
            tooltip.style.opacity = '0';
            tooltip.style.visibility = 'hidden';
            tooltip.style.transform = 'translateX(-50%)';
          }
          
          // Update DOM and localStorage
          html.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
          
          // Update button state (icons only, not tooltip text yet)
          updateToggleButton(newTheme, false);
          
          // Update tooltip text after a brief delay to ensure it stays hidden
          setTimeout(() => {
            if (tooltip) {
              tooltip.textContent = newTheme === 'dark' ? 'Clap on' : 'Clap off';
            }
          }, 100);
          
          // Dispatch custom event for other components that might need to know
          window.dispatchEvent(new CustomEvent('themeChanged', { 
            detail: { theme: newTheme } 
          }));
        }

        // Initialize button state
        const currentTheme = html.getAttribute('data-theme') || 'light';
        updateToggleButton(currentTheme);
        
        // Add event listeners
        themeToggle.addEventListener('click', handleToggle);
        
        // Add hover event listeners for tooltip
        themeToggle.addEventListener('mouseenter', () => {
          const tooltip = themeToggle.querySelector('.tooltip') as HTMLElement;
          if (tooltip) {
            tooltip.style.opacity = '1';
            tooltip.style.visibility = 'visible';
            tooltip.style.transform = 'translateX(-50%) translateY(4px)';
          }
        });
        
        themeToggle.addEventListener('mouseleave', () => {
          const tooltip = themeToggle.querySelector('.tooltip') as HTMLElement;
          if (tooltip) {
            tooltip.style.opacity = '0';
            tooltip.style.visibility = 'hidden';
            tooltip.style.transform = 'translateX(-50%)';
          }
        });
      }

      // Initialize theme toggle when DOM is ready
      document.addEventListener('DOMContentLoaded', initThemeToggle);

      // Also handle page transitions (for Astro view transitions)
      document.addEventListener('astro:page-load', initThemeToggle);
    </script>

    <script>
      // Handle active navigation links
      function setActiveNavLink() {
        const navLinks = document.querySelectorAll('nav .nav-link');
        const currentPath = window.location.pathname;
        
        navLinks.forEach(link => {
          const href = link.getAttribute('href');
          
          // Remove any existing active class
          link.classList.remove('nav-link-active');
          
          // Check if this is the active link
          if (href) {
            if (href === '/' && (currentPath === '/' || currentPath === '')) {
              link.classList.add('nav-link-active');
            } else if (href !== '/' && currentPath.startsWith(href)) {
              link.classList.add('nav-link-active');
            }
          }
        });
      }

      // Initialize active nav links when DOM is ready
      document.addEventListener('DOMContentLoaded', setActiveNavLink);
      
      // Also handle page transitions (for Astro view transitions)
      document.addEventListener('astro:page-load', setActiveNavLink);
    </script>
  </body>
</html>

<style>
  :root {
    body: 'Montserrat Variable', sans-serif;
  }

  /* Light theme (default) */
  [data-theme="light"] {
    --text-color: #2c3e50;
    --background-color: #5b7c99;
    --accent-color: rgba(255, 255, 255, 0.4);
    --nav-text-color: #DFECFF;
    --nav-link-bg: rgba(255, 255, 255, 0.15);
    --nav-link-hover-bg: rgba(255, 255, 255, 0.25);
    --nav-link-active-bg: rgba(255, 255, 255, 0.3);
    --hero-bg-color: #e3dfdf;
    --hero-border-color: #000;
    --post-card-bg: #e3dfdf;
    --post-card-hover-bg: #eeeaea;
    --post-title-color: #1b1928;
    --post-description-color: #1b1928;
    --post-meta-color: #1b1928;
    --section-heading-color: #020202;
    --view-all-color: #DFECFF;
    --blog-post-bg: #f0f0f0;
    --bg-color: #ffffff;
    --pagination-separator-color: rgba(255, 255, 255, 0.4);
    --footer-text-color: rgba(255, 255, 255, 0.7);
    --pagination-link-bg: #f7f7f7; 
    --pagination-link-hover-bg: #d3dfee;
    --pagination-link-active-bg: #fff;
    --pagination-link-active-border-color: #000;
    --tag-color:#1b1928;
    --link-color: #0256a0
  }

  /* Dark theme */
  [data-theme="dark"] {
    --text-color: #e2e8f0;
    --background-color: #1a202c;
    --accent-color: rgba(203, 213, 224, 0.4);
    --nav-text-color: #cbd5e0;
    --nav-link-bg: rgba(255, 255, 255, 0.1);
    --nav-link-hover-bg: rgba(255, 255, 255, 0.15);
    --nav-link-active-bg: rgba(255, 255, 255, 0.2);
    --footer-text-color: #a0aec0;
    --hero-bg-color: #2d3748;
    --hero-border-color: #4a5568;
    --post-card-bg: rgba(45, 55, 72, 1);
    --post-card-hover-bg: #374151;
    --post-title-color: #f7fafc;
    --post-description-color: #e2e8f0;
    --post-meta-color: #cbd5e0;
    --section-heading-color: #f7fafc;
    --view-all-color: #f7fafc;
    --blog-post-bg: #1e293b;
    --bg-color: #0f172a;
    --pagination-separator-color: rgba(203, 213, 224, 0.4);
    --footer-text-color: rgba(203, 213, 224, 0.7);
    --pagination-link-bg: #1e293b;
    --pagination-link-hover-bg: #374151;
    --pagination-link-active-bg: #374151;
    --pagination-link-active-border-color: #f7fafc;
    --tag-color: #f7fafc;
    --link-color: #8ab6ff;
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body {
    color: var(--text-color);
    background-color: var(--background-color);
    line-height: 1.6;
  }

  .site-wrapper {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  nav {
    display: flex;
    gap: 1.5rem;
    align-items: center;
  }

  nav a {
    color: var(--nav-text-color);
    font-size: 1rem;
    font-weight: 700;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  nav a:hover {
    color: var(--nav-text-color);
  }

  .nav-link {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    background-color: var(--nav-link-bg);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    letter-spacing: 0.5px;
    font-size: 0.9rem;
  }

  .nav-link:hover {
    background-color: var(--nav-link-hover-bg);
    transform: translateY(-2px);
    color: var(--nav-text-color);
  }

  .nav-link:active {
    background-color: var(--nav-link-active-bg);
    transform: translateY(0);
  }

  .nav-link-active {
    background-color: var(--nav-link-active-bg);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    position: relative;
  }

  .home-icon-link {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .home-icon-link:hover {
    transform: translateY(-2px);
  }

  .home-icon {
    width: 40px;
    height: 40px;
    display: block;
  }

  @media (max-width: 768px) {
    .home-icon {
      display: none;
    }
  }

  .theme-toggle {
    background: none;
    border: 2px solid transparent;
    padding: 8px 12px;
    cursor: pointer;
    font-size: 1.2rem;
    transition: all 0.3s ease;
    position: relative;
    min-width: 60px;
    height: 40px;
  }

  .theme-toggle:hover {
    transform: scale(1.05);
  }

  .theme-toggle .light-icon,
  .theme-toggle .dark-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .theme-toggle .tooltip {
    position: absolute;
    top: calc(100% + 5px);
    left: 50%;
    transform: translateX(-50%);
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease, transform 0.2s ease;
    z-index: 1000;
    pointer-events: none;
    font-family: 'Montserrat Variable', sans-serif;
  }

  /* Light mode tooltip */
  [data-theme="light"] .theme-toggle .tooltip {
    background-color: #1b1928;
    color: #ffffff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  [data-theme="light"] .theme-toggle .tooltip::before {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 6px solid transparent;
    border-bottom-color: #1b1928;
  }

  /* Dark mode tooltip */
  [data-theme="dark"] .theme-toggle .tooltip {
    background-color: #f7fafc;
    color: #1a202c;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  [data-theme="dark"] .theme-toggle .tooltip::before {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 6px solid transparent;
    border-bottom-color: #f7fafc;
  }

  .theme-toggle:hover .tooltip,
  .theme-toggle:focus .tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(4px);
  }

  main {
    flex: 1;
  }

  footer {
    margin-top: 4rem;
    text-align: center;
    color: var(--footer-text-color);
    font-size: 0.9rem;
    padding: 2rem 0;
  }

  footer a {
    color: var(--footer-text-color);
  }

  .social-links {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .social-links a {
    color: var(--footer-text-color);
    padding: 0.5rem;
  }

  .social-links svg {
    width: 24px;
    height: 24px;
    transition: transform 0.2s ease;
  }

  .social-links a:hover svg {
    transform: scale(1.1);
  }


  h1, h2, h3, h4, h5, h6 {
    font-family: 'Montserrat Variable', sans-serif;
    font-weight: 900;
  }

  p, a {
    font-family: 'Montserrat Variable', sans-serif;
    font-weight: 400;
  }
</style> 